<Project Sdk="Microsoft.NET.Sdk">
    <!-- BepInEx Properties -->
    <PropertyGroup>
        <AssemblyName>Hamunii.ModMenuAPI.CoreMod.CW</AssemblyName>
        <Product>ModMenuAPI_CoreMod_CW</Product>
        <!-- Change to whatever version you're currently on. -->
        <Version>1.0.0</Version>
    </PropertyGroup>

    <!-- Project Properties -->
    <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>
        <RootNamespace>CoreModCW</RootNamespace>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>
    </PropertyGroup>

    <!-- Enable Nullable for better IDE null-checking -->
    <PropertyGroup>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <!-- Set NuGet Sources -->
    <PropertyGroup>
        <RestoreAdditionalProjectSources>
            https://api.nuget.org/v3/index.json;
            https://nuget.bepinex.dev/v3/index.json
        </RestoreAdditionalProjectSources>
    </PropertyGroup>

    <!-- Embed Debug Symbols for Easier Debugging -->
    <PropertyGroup>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>embedded</DebugType>
        <!--
        Trim the project path to prevent players from potentially
        viewing Private Information in stack traces.
        -->
        <PathMap>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)'))=./</PathMap>
    </PropertyGroup>

    <!-- Primary Package References -->
    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Core" Version="5.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.PluginInfoProps" Version="2.*" PrivateAssets="all"/>
        <PackageReference Include="UnityEngine.Modules" Version="2022.3.10" PrivateAssets="all"/>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="../../ModMenuAPI/ModMenuAPI.csproj"/>
    </ItemGroup>

    <!-- References - Game Assemblies -->
    <ItemGroup Condition="$(CI) != 'true'">
        <Reference Include="$(ManagedDirectory)Assembly-CSharp.dll" Publicize="true" Private="false"/>
        <Reference Include="$(ManagedDirectory)Zorro.Core.Runtime.dll" Publicize="true" Private="false"/>
    </ItemGroup>

    <!-- Package References - Game Assemblies -->
    <ItemGroup Condition="$(CI) == 'true'">
        <PackageReference Include="ContentWarning.GameLibs.Steam" Version="*-*" Publicize="true" PrivateAssets="all"/>
    </ItemGroup>

    <!-- References - HookGen Assemblies -->
    <ItemGroup>
        <Reference Include="$(MMHOOKManaged)MMHOOK_Assembly-CSharp.dll"/>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.32"/>
    </ItemGroup>
    <!-- The only way I know of to live reload multiple assemblies when one of them
            is a dependency for the other, is to make them a single assembly. -->
    <Target Name="ILRepacker" AfterTargets="Build" Condition="'$(Configuration)' == 'Debug'">
        <ItemGroup>
            <InputAssemblies Include="$(TargetPath)"/>
            <InputAssemblies Include="@(ReferencePathWithRefAssemblies)" Condition="'%(filename)' == 'Hamunii.ModMenuAPI'" />
            <LibraryPath Include="%(ReferencePathWithRefAssemblies.RelativeDir)" />
        </ItemGroup>

        <ILRepack
            AllowDuplicateResources="false"
            DebugInfo="true"
            Internalize="true"
            InputAssemblies="@(InputAssemblies)"
            LibraryPath="@(LibraryPath)"
            OutputFile="$(PluginsDirectory)../scripts/Hamunii.ModMenuAPI.CoreBundle.CW.dll"
            Parallel="true"
            TargetKind="SameAsPrimaryAssembly" />
    </Target>

    <!-- Build our Thunderstore package when making a release build. This does not publish our package. -->
    <!-- For more information about tcli, see https://github.com/thunderstore-io/thunderstore-cli/wiki -->
    <Target Name="PackThunderstore" AfterTargets="PostBuildEvent" Condition="$(Configuration) == 'Release'">
        <Exec Command="dotnet tcli build --config-path &quot;$(ProjectDir)Thunderstore/thunderstore.toml&quot; --package-version $(Version) --package-name $(Product) --package-namespace Hamunii"  />
    </Target>
</Project>
